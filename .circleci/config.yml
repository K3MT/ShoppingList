# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Define the orbs to be used by CircleCI
orbs:
  browser-tools: circleci/browser-tools@1.2
  phpunit: stockfiller/phpunit@1.1.0
  codecov: codecov/codecov@1.0.2

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  build-test-codecov:
    docker: # run the steps with Docker
      - image: cimg/php:8.0.14-browsers
    working_directory: ~/ShoppingList
    steps:
      - checkout
      - run: sudo pecl install pcov
      - run: sudo composer selfupdate
      - restore_cache: # special step to restore the dependency cache if `composer.lock` does not change
          keys:
            - composer-v1-{{ checksum "composer.lock" }}
            # fallback to using the latest cache if no exact match is found (See https://circleci.com/docs/caching/)
            - composer-v1-
      - run: composer install -n --prefer-dist
      - save_cache: # special step to save the dependency cache with the `composer.lock` cache key template
          key: composer-v1-{{ checksum "composer.lock" }}
          paths:
            - vendor
      # run tests!
      - run: ./vendor/bin/phpunit --log-junit /tmp/coverage.xml -c phpunit.xml --migrate-configuration
      - store_test_results:
          path: ~/phpunit
      - store_artifacts:
          path: ~/phpunit
      - codecov/upload:
          file: ~/phpunit/junit.xml

  build:
    docker:
      # specify the version you desire here
      - image: cimg/php:7.4.3
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/mysql:9.4
    working_directory: ~/ShoppingList
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "composer.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run: composer self-update
      - save_cache:
          paths:
            - ./vendor
          key: v1-dependencies-{{ checksum "composer.json" }}
      - run: mkdir var/data
      # run tests!
      - run: ./vendor/bin/phpunit
      - store_test_results:
          path: /tmp
      - store_artifacts:
          path: /tmp
      - codecov/upload:
          file: /tmp/coverage.xml




  deploy-to-main-backend:
    docker:
      - image: cimg/base:stable
    steps:
      - run:
          name: Clone server
          working_directory: ~/workdir
          command: |
            git clone https://${K3MPT_GITHUB_TOKEN}@github.com/K3MT/ShoppingList.git
      - run:
          name: Trigger server deployment
          working_directory: ~/workdir/ShoppingList
          command: |
            git fetch origin
            git config credential.helper 'cache --timeout=120'
            git config user.email "<email>"
            git config user.name "Deployment Bot"
            git checkout dev-backend
            git checkout main-backend
            git merge --no-edit dev-backend
            git commit --allow-empty -m "Trigger deployment"
            # Push quietly to prevent showing the token in log
            git push -q https://${K3MPT_GITHUB_TOKEN}@github.com/K3MT/ShoppingList.git
  say-hello:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    docker:
      - image: cimg/base:stable
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      - checkout
      - run:
          name: "Say hello"
          command: "echo Hello, World!"

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  #  say-hello-workflow:
  #    jobs:
  #      - say-hello

  test-deploy-workflow:
    jobs:
      #      - build
      - build-test-codecov:
          filters:
            branches:
              only:
                dev-backend
      - deploy-to-main-backend:
          requires:
            - build-test-codecov
          filters:
            branches:
              only:
                - dev-backend
